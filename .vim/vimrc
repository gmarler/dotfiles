"
"=====[ Miscellaneous Features (mainly Options) ]==============================
"
set nocompatible                  " Don't bother with vi compatibility

set backspace=eol,start,indent    " BS past autoindents, line boundaries, and
                                  "   even the start of insertion

"=======[ Fix smartindent stupidities ]============

set autoindent                    " Retain indentation on next line
set smartindent                   " Turn on autoindenting of blocks
" set copyindent

set whichwrap+=<,>,h,l            " ??? how does this work?
set shiftwidth=2                  " # of spaces for autoindening
set shiftround                    " use multiple of shiftwidth when indenting with '<' and ':
set showmatch                     " Show matching brackets when text indicator is over them
set ignorecase                    " ignore case when searching
set smartcase                     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set hlsearch                      " highlight all matches
set incsearch                     " Lookahead as search pattern is specified
highlight clear Search
highlight       Search    term=White gui=White ctermfg=White

set noshowmode                    " Eliminate default mode, for Airline

"=====[ Enable Nmap command for documented mappings ]==========================

runtime plugin/documap.vim


" When searching, will wrap from bottom of buffer to top when going to next match
set wrapscan

" Sets how many lines of history VIM has to remember
set history=1000
set undolevels=1000

" Use spaces, rather than <TAB>, for indenting
set expandtab
set tabstop=2
set smarttab                      " ????

set ruler                         " Always show current position
set number                        " Always show line numbers
set cursorcolumn                  " Highlight column cursor is in
set cursorline                    " Highlight line cursor is on

set title
set titleold=

set nobackup
set swapfile
" Toggle auto-indent for pasting into the editor
set pastetoggle=<F2>

nnoremap ; :                      " ?????

" Disable filetype plugin just prior to invoking pathogen
filetype plugin off " Just to be sure we reset everything

" Activate pathogen and automatically generate help docs
call pathogen#infect()
call pathogen#helptags()

" It's now ok to activate filetype plugin
filetype on
filetype plugin on
filetype indent on

" Set up statusline
set laststatus=2   " always display statusline
set statusline=%F\ %m\ %{fugitive#statusline()}\ %y%=%l,%c\ %P

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving (via Fugitive)
if exists(":Gwrite")
  nmap <leader>w   :Gwrite!<cr>
else
  nmap <leader>w   :w!<cr>
endif
nmap <leader>s   :Gstatus<cr>
nmap <leader>c   :Gcommit<cr>
nmap <leader>gpm :Git push origin master<cr>

"=====[ Edit and auto-update .vimrc and plugins ]==============================

augroup VimReload
autocmd!
    autocmd BufWritePost vimrc source ~/dotfiles/.vim/vimrc
augroup END

Nmap <silent>  ;v   [Edit .vimrc]          :next ~/dotfiles/.vim/vimrc<CR>
Nmap           ;vv  [Edit .vim/plugin/...] :next ~/.vim/plugin/



"=====[ VIM User Interface Settings ]==========================================

" set wildmenu "Turn on WiLd menu
"
" Files to ignore for Command-T / other listings
set wildignore+=*.o,*.obj,.git,public/stylesheets/**,public/cache/**


" set cmdheight=2 "The commandbar height

set nohidden      "
" Disable this or Airline won't be able to update in a timely manner
"set lazyredraw    " Don't redraw while executing macros
set magic         " Set magic on, for regular expressions
set mat=2         " How many tenths of a second to blink

" No sound on errors
" set noerrorbells
" set novisualbell
" set t_vb=
" set tm=500

" Highlight trailing/leading whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+\%#\@<!$/


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable     " Enable syntax hl

if has("gui_running")
  set guioptions-=T
  set t_Co=256
  set background=dark
  colorscheme torte
  set nonu
else
  set t_Co=256
  set background=light
  colorscheme summerfruit256
  " set nonu
endif

"set guifont=Inconsolata-dz\ for\ Powerline\ Medium\ 14
set guifont=Cousine\ for\ Powerline\ 14
"set guifont=Roboto\ Mono\ Medium\ for\ Powerline\ 15
"set guifont=Roboto\ Mono\ Light\ for\ Powerline\ 15
"set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 18

" Solarized Colorscheme
"set background=dark
let g:solarized_termtrans=1
let g:solarized_termcolors=256
let g:solarized_contrast="high"
let g:solarized_visibility="high"

"colorscheme solarized
colorscheme vividchalk


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set textwidth=80
set wrap                      " Wrap lines
set linebreak                 " Wrap lines on chars in 'breakat'
" Have to use Unicode value so that wrapped lines can be distinguished.
" List of Unicode symbols available at:
" http://www.fileformat.info/info/unicode/utf8test.htm
" Currently using, via C-vuXXXX: 21b3
set showbreak=\ \ \ ↳
set list listchars=tab:»·,trail:·,eol:¬


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FileType specific items
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")
  " Syntax of languages that care about having tabs vs spaces
  autocmd FileType make setlocal tabstop=2 softtabstop=2 shiftwidth=2 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " Personal preferences
  autocmd FileType html       setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType css        setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
  autocmd FileType perl       setlocal ts=2 sts=2 sw=2 expandtab
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin specific definitions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Perl Support
let g:Perl_MapLeader = ","
" Man page Reader
source $VIMRUNTIME/ftplugin/man.vim

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Key Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Display any embedded control characters - handy for cleanly indenting
" HERE docs so they look pretty too
nmap <leader>L :set list!<CR> " toggle invisible chars
nmap <leader>N :set number!<CR>
" Toggle Show Marks - but leave them off by default
let g:showmarks_enable=0
nmap <leader>Mo :ShowMarksToggle<CR> " toggle Show Marks
" Toggle Gundo
nnoremap <F5> :GundoToggle<CR>

" Meta+1-0 jumps to tab 1-10, Shift+Meta+1-0 jumps to tab 11-20:
"let s:windowmapnr = 0
"let s:wins='1234567890!@#$%^&*()'
"while (s:windowmapnr < strlen(s:wins))
"    exe 'noremap <silent> <D-' . s:wins[s:windowmapnr] . '> ' . (s:windowmapnr + 1) . 'gt'
"    exe 'inoremap <silent> <D-' . s:wins[s:windowmapnr] . '> <C-O>' . (s:windowmapnr + 1) . 'gt'
"    exe 'cnoremap <silent> <D-' . s:wins[s:windowmapnr] . '> <C-C>' . (s:windowmapnr + 1) . 'gt'
"    exe 'vnoremap <silent> <D-' . s:wins[s:windowmapnr] . '> <C-C>' . (s:windowmapnr + 1) . 'gt'
"    let s:windowmapnr += 1
"endwhile
"unlet s:windowmapnr s:wins

" An interesting Prove() function from http://www.perlmonks.org/?node_id=434793
"function! Prove ( verbose, taint )
"    if ! exists("g:testfile")
"        let g:testfile = "t/*.t"
"    endif
"    if g:testfile == "t/*.t" || g:testfile =~ "\.t$"
"        let s:params = "l"
"        if a:verbose
"            let s:params = s:params . "v"
"        endif
"        if a:taint
"            let s:params = s:params . "Tt"
"        endif
"        execute "!prove -" . s:params . " " . g:testfile
"    else
"       call Compile ()
"    endif
"endfunction

"function! Compile ()
"    if ! exists("g:compilefile")
"        let g:compilefile = expand("%")
"    endif
"    execute "!perl -wc -Ilib " . g:compilefile
"endfunction

function! TestClassMoose(filePath)
  let l:splitList = split(a:filePath,'/')
  let l:pm_filename   = l:splitList[-1]
  let l:nonpm_filename = substitute(l:pm_filename, ".pm", "", "")
  call remove(l:splitList,0)
  call remove(l:splitList,0)
  call remove(l:splitList,-1)
  call add(l:splitList,l:nonpm_filename)

  let a:pmPath = join(l:splitList,'::')
  "echo a:pmPath
  echo system("prove -lv t/tests.t :: " . a:pmPath)
endfunction

function! MyProve ( filePath, debug )
  let l:proveParams = "lv"
  let l:perlParams = "d"

  if ! exists("g:perlTestfile")
    let g:perlTestfile = "t/tests.t"  " Assume Test::Class::Moose style tests
  endif

  if (a:debug == 0)
   let l:splitList = split(a:filePath,'/')
   let l:pm_filename   = l:splitList[-1]
   let l:nonpm_filename = substitute(l:pm_filename, ".pm", "", "")
   call remove(l:splitList,0)
   call remove(l:splitList,0)
   call remove(l:splitList,-1)
   call add(l:splitList,l:nonpm_filename)

   let l:pmPath = join(l:splitList,'::')
   let l:fullCmd = "prove -" . l:proveParams . " " . g:perlTestfile . " :: " . l:pmPath
   echom l:fullCmd
  else
    " Call perl directly with debugger
    echom "Not Implemented yet"
  endif

  " Open a new split and set it up.
  if bufexists("__Perl_Test_Output__")
    let l:bufwindow = bufwinnr("__Perl_Test_Output__")
    if (l:bufwindow != -1)
      execute l:bufwindow . "wincmd w"
    else
      split __Perl_Test_Output__
    endif
  else
    split __Perl_Test_Output__
    " Make sure the nice ANSI escape sequences get displayed correctly
    " But make sure we only call this once!
    AnsiEsc
  endif

  silent execute "normal! ggdG"
  " setlocal filetype=???
  setlocal buftype=nofile noswapfile nobuflisted nowrap " bufhidden=wipe

  silent execute '$read !' . l:fullCmd

"   execute "!prove -" . l:proveParams . " " . g:perlTestfile . " :: " . l:pmPath
"   let l:out = system("prove -" . l:proveParams . " " . g:perlTestfile . " :: " . l:pmPath . " 2>&1")
"   call append(0, split(l:out, '\v\n'))
"   echom "prove -" . l:proveParams . " " . g:perlTestfile . " :: " . l:pmPath
endfunction

noremap <leader>t :call TestClassMoose(expand('%'))<CR>
noremap <leader>T :call MyProve(expand('%') , 0)<CR>

" ========================================================================
" Session Manager Configuration
" ========================================================================
let g:session_autosave = 1
let g:session_autoload = 1

" ========================================================================
" Airline Configuration
" ========================================================================
let g:airline_theme            = 'behelit'
let g:airline_enable_branch    = 1
let g:airline_enable_syntastic = 1

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
"let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"let g:airline_symbols.crypt = '🔒'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
"let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

" old vim-powerline symbols
"let g:airline_left_sep = '⮀'
"let g:airline_left_alt_sep = '⮁'
"let g:airline_right_sep = '⮂'
"let g:airline_right_alt_sep = '⮃'
"let g:airline_symbols.branch = '⭠'
"let g:airline_symbols.readonly = '⭤'
"let g:airline_symbols.linenr = '⭡'

let g:airline_powerline_fonts = 1

" ========================================================================
" GNUPG Mode
" ========================================================================
let g:GPGExecutable = "/usr/bin/gpg2"
" Tell the GnuPG plugin to armor new files.
let g:GPGPreferArmor = 1
" Tell the GnuPG plugin to sign new files.
let g:GPGPreferSign = 1

augroup GnuPGExtra
" Set extra file options.
  autocmd BufReadCmd,FileReadCmd *.\(gpg\|asc\|pgp\) call SetGPGOptions()
" Automatically close unmodified files after inactivity
  autocmd CursorHold *.\(gpg\|asc\|pgp\) quit
augroup END

function! SetGPGOptions()
  " Set updatetime to 1 minute.
  set updatetime=300000
  " Fold at markers.
  set foldmethod=marker
  " Automatically close all folds.
  set foldclose=all
  " Only open folds with insert commands.
  set foldopen=insert
endfunction

" ========================================================================
" Startup
" ========================================================================
" Open NERDTree on start
" autocmd VimEnter * exe 'NERDTree' | wincmd l
" Allow the NERDTree to be toggled by Ctrl-T:
nnoremap <silent> <C-t> :NERDTreeToggle<CR>
" Allow taglist to be toggled by Ctrl-A:
nnoremap <silent> <C-a> :TlistToggle<CR>

" Only apply to *.txt files
augroup HelpInTabs
  autocmd!
  autocmd BufEnter *.txt    call HelpInNewTab()
augroup END

" Only apply to help file
function! HelpInNewTab()
  if &buftype == 'help'
    " Convert the help window into a tab
    execute "normal \<C-W>T"
  endif
endfunction

"======[ Magically build interim directories if necessary ]====================

function! AskQuit (msg, options, quit_option)
    if confirm(a:msg, a:options) == a:quit_option
        exit
    endif
endfunction

function! EnsureDirExists ()
    let required_dir = expand("%:h")
    if !isdirectory(required_dir)
        call AskQuit("Parent directory '" . required_dir . "' doesn't exist.",
             \       "&Create it\nor &Quit?", 2)

        try
            call mkdir( required_dir, 'p' )
        catch
            call AskQuit("Can't create '" . required_dir . "'",
            \            "&Quit\nor &Continue anyway?", 1)
        endtry
    endif
endfunction

augroup AutoMkdir
    autocmd!
    autocmd  BufNewFile  *  :call EnsureDirExists()
augroup END

" =====[ Smart completion via <TAB> and <S-TAB> ]=============

runtime plugin/smartcom.vim

" Add extra completions (mainly for Perl programming)...

let ANYTHING = ""
let NOTHING  = ""
let EOL      = '\s*$'

                " Left     Right      Insert                             Reset cursor
                " =====    =====      ===============================    ============
call SmartcomAdd( '<<',    ANYTHING,  '>>',                              {'restore':1} )
call SmartcomAdd( '<<',    '>>',      "\<CR>\<ESC>O\<TAB>"                             )
call SmartcomAdd( '?',     ANYTHING,  '?',                               {'restore':1} )
call SmartcomAdd( '?',     '?',       "\<CR>\<ESC>O\<TAB>"                             )
call SmartcomAdd( '{{',    ANYTHING,  '}}',                              {'restore':1} )
call SmartcomAdd( '{{',    '}}',      NOTHING,                                         )
call SmartcomAdd( 'qr{',   ANYTHING,  '}xms',                            {'restore':1} )
call SmartcomAdd( 'qr{',   '}xms',    "\<CR>\<C-D>\<ESC>O\<C-D>\<TAB>"                 )
call SmartcomAdd( 'm{',    ANYTHING,  '}xms',                            {'restore':1} )
call SmartcomAdd( 'm{',    '}xms',    "\<CR>\<C-D>\<ESC>O\<C-D>\<TAB>",                )
call SmartcomAdd( 's{',    ANYTHING,  '}{}xms',                          {'restore':1} )
call SmartcomAdd( 's{',    '}{}xms',  "\<CR>\<C-D>\<ESC>O\<C-D>\<TAB>",                )
call SmartcomAdd( '\*\*',  ANYTHING,  '**',                              {'restore':1} )
call SmartcomAdd( '\*\*',  '\*\*',    NOTHING,                                         )

" Handle single : correctly...
call SmartcomAdd( '^:\|[^:]:',  EOL,  "\<TAB>" )

"After an alignable, align...
function! AlignOnPat (pat)
    return "\<ESC>:call EQAS_Align('nmap',{'pattern':'" . a:pat . "'})\<CR>A"
endfunction
                " Left         Right        Insert
                " ==========   =====        =============================
call SmartcomAdd( '=',         ANYTHING,    "\<ESC>:call EQAS_Align('nmap')\<CR>A")
call SmartcomAdd( '=>',        ANYTHING,    AlignOnPat('=>') )
call SmartcomAdd( '\s#',       ANYTHING,    AlignOnPat('\%(\S\s*\)\@<= #') )
call SmartcomAdd( '[''"]\s*:', ANYTHING,    AlignOnPat(':'),                   {'filetype':'vim'} )
call SmartcomAdd( ':',         ANYTHING,    "\<TAB>",                          {'filetype':'vim'} )


" Perl keywords...
"
                " Left         Right   Insert                                  Where
                " ==========   =====   =============================           ===================
call SmartcomAdd( '^\s*for',   EOL,    " my $___ (___) {\n___\n}\n___",        {'filetype':'perl'} )
call SmartcomAdd( '^\s*if',    EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*while', EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*given', EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )
call SmartcomAdd( '^\s*when',  EOL,    " (___) {\n___\n}\n___",                {'filetype':'perl'} )

"=====[ Search folding ]=====================

" Don't start new buffers folded
set foldlevelstart=99

" Highlight folds
highlight Folded  ctermfg=cyan ctermbg=black

" Toggle on and off...
nmap <silent> <expr>  zz  FS_ToggleFoldAroundSearch({'context':1})

" Show only sub defns (and maybe comments)...
let perl_sub_pat = '^\s*\%(sub\|func\|method\|package\)\s\+\k\+'
let vim_sub_pat  = '^\s*fu\%[nction!]\s\+\k\+'
augroup FoldSub
    autocmd!
    autocmd BufEnter * nmap <silent> <expr>  zp  FS_FoldAroundTarget(perl_sub_pat,{'context':1})
    autocmd BufEnter * nmap <silent> <expr>  za  FS_FoldAroundTarget(perl_sub_pat.'\zs\\|^\s*#.*',{'context':0, 'folds':'invisible'})
    autocmd BufEnter *.vim,.vimrc nmap <silent> <expr>  zp  FS_FoldAroundTarget(vim_sub_pat,{'context':1})
    autocmd BufEnter *.vim,.vimrc nmap <silent> <expr>  za  FS_FoldAroundTarget(vim_sub_pat.'\\|^\s*".*',{'context':0, 'folds':'invisible'})
    autocmd BufEnter * nmap <silent> <expr>             zv  FS_FoldAroundTarget(vim_sub_pat.'\\|^\s*".*',{'context':0, 'folds':'invisible'})
augroup END

" Show only C #includes...
nmap <silent> <expr>  zu  FS_FoldAroundTarget('^\s*use\s\+\S.*;',{'context':1})

"=====[ Add or subtract comments ]===============================

" Work out what the comment character is, by filetype...
autocmd FileType             *sh,awk,python,perl,perl6,ruby    let b:cmt = exists('b:cmt') ? b:cmt : '#'
autocmd FileType             vim                               let b:cmt = exists('b:cmt') ? b:cmt : '"'
autocmd BufNewFile,BufRead   *.vim,.vimrc                      let b:cmt = exists('b:cmt') ? b:cmt : '"'
autocmd BufNewFile,BufRead   *                                 let b:cmt = exists('b:cmt') ? b:cmt : '#'
autocmd BufNewFile,BufRead   *.p[lm],.t                        let b:cmt = exists('b:cmt') ? b:cmt : '#'

" Work out whether the line has a comment then reverse that condition...
function! ToggleComment ()
    " What's the comment character???
    let comment_char = exists('b:cmt') ? b:cmt : '#'

    " Grab the line and work out whether it's commented...
    let currline = getline(".")

    " If so, remove it and rewrite the line...
    if currline =~ '^' . comment_char
        let repline = substitute(currline, '^' . comment_char, "", "")
        call setline(".", repline)

    " Otherwise, insert it...
    else
        let repline = substitute(currline, '^', comment_char, "")
        call setline(".", repline)
    endif
endfunction

" Toggle comments down an entire visual selection of lines...
function! ToggleBlock () range
    " What's the comment character???
    let comment_char = exists('b:cmt') ? b:cmt : '#'

    " Start at the first line...
    let linenum = a:firstline

    " Get all the lines, and decide their comment state by examining the first...
    let currline = getline(a:firstline, a:lastline)
    if currline[0] =~ '^' . comment_char
        " If the first line is commented, decomment all...
        for line in currline
            let repline = substitute(line, '^' . comment_char, "", "")
            call setline(linenum, repline)
            let linenum += 1
        endfor
    else
        " Otherwise, encomment all...
        for line in currline
            let repline = substitute(line, '^\('. comment_char . '\)\?', comment_char, "")
            call setline(linenum, repline)
            let linenum += 1
        endfor
    endif
endfunction


" Set up the relevant mappings
nmap <silent> # :call ToggleComment()<CR>j0
vmap <silent> # :call ToggleBlock()<CR>

